{"version":3,"file":"intercept.js","sources":["../../src/common/intercept.ts"],"sourcesContent":["// import { shouldUpdate } from '../app'\n\nimport type { Display } from '../object/display'\n\nexport function interceptUpdate() {\n  return function (target: Display, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalSet = descriptor.set\n\n    const originalGet = descriptor.get\n\n    descriptor.set = function (newValue) {\n      if (originalSet) {\n        const oldValue = originalGet?.call(this)\n        if (newValue !== oldValue) {\n          originalSet.call(this, newValue)\n          target.dirty = true\n        }\n        else {\n          // console.warn([newValue, oldValue], '新旧值相同')\n        }\n      }\n    }\n\n    Object.defineProperty(target, propertyKey, descriptor)\n  }\n}\n\nexport function interceptUpdate2() {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    // const originalSet = descriptor.set\n\n    // const originalGet = descriptor.get\n\n    // descriptor.set = function (newValue) {\n    //   if (originalSet) {\n    //     const oldValue = originalGet?.call(this)\n    //     if (newValue !== oldValue) {\n    //       originalSet.call(this, newValue)\n    //       target.dirty = true\n    //     }\n    //     else {\n    //       // console.warn([newValue, oldValue], '新旧值相同')\n    //     }\n    //   }\n    // }\n\n    // Object.defineProperty(target, propertyKey, descriptor)\n  }\n}\n"],"names":["target","propertyKey","descriptor","originalSet","set","originalGet","get","newValue","oldValue","call","this","dirty","Object","defineProperty"],"mappings":"gDAKE,OAAO,SAAUA,EAAiBC,EAAqBC,GACrD,MAAMC,EAAcD,EAAWE,IAEzBC,EAAcH,EAAWI,IAE/BJ,EAAWE,IAAM,SAAUG,GACzB,GAAIJ,EAAa,CACf,MAAMK,EAAWH,GAAaI,KAAKC,MAC/BH,IAAaC,IACfL,EAAYM,KAAKC,KAAMH,GACvBP,EAAOW,OAAQ,EAKlB,CACH,EAEAC,OAAOC,eAAeb,EAAQC,EAAaC,EAC7C,CACF,sCAGE,OAAO,SAAUF,EAAaC,EAAqBC,GAmBnD,CACF"}