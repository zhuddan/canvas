{"version":3,"file":"event.mjs","sources":["../../src/common/event.ts"],"sourcesContent":["export type EventType = string | symbol\n\n// An event handler can take an optional event argument\n// and should not return a value\nexport type Handler<T = unknown> = (event: T) => void\nexport type WildcardHandler<T = Record<string, unknown>> = (\n  type: keyof T,\n  event: T[keyof T]\n) => void\n\n// An array of all currently registered event handlers for a type\nexport type EventHandlerList<T = unknown> = Array<Handler<T>>\nexport type WildCardEventHandlerList<T = Record<string, unknown>> = Array<\n  WildcardHandler<T>\n>\n\n// A map of event types and their corresponding event handlers.\nexport type EventHandlerMap<Events extends Record<EventType, unknown>> = Map<keyof Events | '*', EventHandlerList<Events[keyof Events]> | WildCardEventHandlerList<Events>>\n\nexport interface Emitter<Events extends Record<EventType, unknown>> {\n  all: EventHandlerMap<Events>\n\n  on: (<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>) => void) & ((type: '*', handler: WildcardHandler<Events>) => void)\n\n  off: (<Key extends keyof Events>(\n    type: Key,\n    handler?: Handler<Events[Key]>\n  ) => void) & ((type: '*', handler: WildcardHandler<Events>) => void)\n\n  emit: (<Key extends keyof Events>(type: Key, event: Events[Key]) => void) & (<Key extends keyof Events>(\n    type: undefined extends Events[Key] ? Key : never\n  ) => void)\n}\n\nexport class Event<Events extends Record<EventType, unknown>, GenericEventHandler = Handler<Events[keyof Events]>\n  | WildcardHandler<Events>> {\n  all: EventHandlerMap<Events> = new Map()\n\n  on<Key extends keyof Events>(type: Key, handler: GenericEventHandler) {\n    const handlers: Array<GenericEventHandler> | undefined = this.all?.get(type) as Array<GenericEventHandler>\n    if (handlers) {\n      handlers.push(handler)\n    }\n    else {\n      this.all!.set(type, [handler] as EventHandlerList<Events[keyof Events]>)\n    }\n  }\n\n  /**\n   * Remove an event handler for the given type.\n   * If `handler` is omitted, all handlers of the given type are removed.\n   * @param {string|symbol} type Type of event to unregister `handler` from (`'*'` to remove a wildcard handler)\n   * @param {Function} [handler] Handler function to remove\n   * @memberOf mitt\n   */\n  off<Key extends keyof Events>(type: Key, handler?: GenericEventHandler) {\n    const handlers: Array<GenericEventHandler> | undefined = this.all?.get(type) as Array<GenericEventHandler>\n    if (handlers) {\n      if (handler) {\n        handlers.splice(handlers.indexOf(handler) >>> 0, 1)\n      }\n      else {\n        this.all!.set(type, [])\n      }\n    }\n  }\n\n  /**\n   * Invoke all handlers for the given type.\n   * If present, `'*'` handlers are invoked after type-matched handlers.\n   *\n   * Note: Manually firing '*' handlers is not supported.\n   *\n   * @param {string|symbol} type The event type to invoke\n   * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n   * @memberOf mitt\n   */\n  emit<Key extends keyof Events>(type: Key, evt?: Events[Key]) {\n    let handlers = this.all?.get(type)\n    if (handlers) {\n      (handlers as EventHandlerList<Events[keyof Events]>)\n        .slice()\n        .forEach((handler) => {\n          handler(evt!)\n        })\n    }\n\n    handlers = this.all?.get('*')\n    if (handlers) {\n      (handlers as WildCardEventHandlerList<Events>)\n        .slice()\n        .forEach((handler) => {\n          handler(type, evt!)\n        })\n    }\n  }\n}\n"],"names":[],"mappings":";;MAkCa,KAAK,CAAA;AAEhB,IAAA,GAAG,GAA4B,IAAI,GAAG,EAAE,CAAA;IAExC,EAAE,CAA2B,IAAS,EAAE,OAA4B,EAAA;QAClE,MAAM,QAAQ,GAA2C,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAA+B,CAAA;QAC1G,IAAI,QAAQ,EAAE;AACZ,YAAA,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;SACvB;aACI;YACH,IAAI,CAAC,GAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,OAAO,CAA2C,CAAC,CAAA;SACzE;KACF;AAED;;;;;;AAMG;IACH,GAAG,CAA2B,IAAS,EAAE,OAA6B,EAAA;QACpE,MAAM,QAAQ,GAA2C,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAA+B,CAAA;QAC1G,IAAI,QAAQ,EAAE;YACZ,IAAI,OAAO,EAAE;AACX,gBAAA,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAA;aACpD;iBACI;gBACH,IAAI,CAAC,GAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;aACxB;SACF;KACF;AAED;;;;;;;;;AASG;IACH,IAAI,CAA2B,IAAS,EAAE,GAAiB,EAAA;QACzD,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAA;QAClC,IAAI,QAAQ,EAAE;YACX,QAAmD;AACjD,iBAAA,KAAK,EAAE;AACP,iBAAA,OAAO,CAAC,CAAC,OAAO,KAAI;gBACnB,OAAO,CAAC,GAAI,CAAC,CAAA;AACf,aAAC,CAAC,CAAA;SACL;QAED,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAA;QAC7B,IAAI,QAAQ,EAAE;YACX,QAA6C;AAC3C,iBAAA,KAAK,EAAE;AACP,iBAAA,OAAO,CAAC,CAAC,OAAO,KAAI;AACnB,gBAAA,OAAO,CAAC,IAAI,EAAE,GAAI,CAAC,CAAA;AACrB,aAAC,CAAC,CAAA;SACL;KACF;AACF;;;;"}