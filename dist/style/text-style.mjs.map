{"version":3,"file":"text-style.mjs","sources":["../../src/style/text-style.ts"],"sourcesContent":["import type { Properties, Property } from 'csstype'\n// import { interceptDirty } from '../common/intercept'\nimport type { Display } from '../object/display'\nimport { createCanvasFontString, formatValue } from '../utils'\nimport type { IAbstractStyle } from './abstract-style'\nimport { AbstractStyle } from './abstract-style'\n\nexport interface TextStyleOptions extends IAbstractStyle {\n  /**\n   * @description 字体\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family)\n   */\n  fontFamily: Properties['fontFamily']\n  /**\n   * @description 字体大小 当值为 number 时单位为px\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size)\n   */\n  fontSize: Properties['fontSize'] | (number & {})\n  /**\n   * @description 字体样式\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-style)\n   */\n  fontStyle: Properties['fontStyle']\n  /**\n   * @description 字体的粗细程度\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight)\n   */\n  fontWeight: Properties['fontWeight']\n  /**\n   * 指定绘制文本时字体如何被扩展或压缩\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/fontStretch)\n   */\n  fontStretch: CanvasFontStretch\n  /**\n   * 用于指定渲染文本的替代大写形式\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps)\n   */\n  fontVariantCaps: CanvasFontVariantCaps\n  /**\n   * 用于指定绘制文本时字母之间的间距\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/letterSpacing)\n   */\n  letterSpacing: string | number\n  /**\n   * 指定绘制文本时单词之间的间距\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/wordSpacing)\n   */\n  wordSpacing: string | number\n  /**\n   * 文本时文本的对齐方式\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/textAlign)\n   */\n  textAlign: CanvasTextAlign\n\n  lineHeight: number\n  wordWrap: boolean\n  wordWrapWidth: number\n}\n\nexport class TextStyle extends AbstractStyle implements TextStyleOptions {\n  public static defaultTextStyle: TextStyleOptions = {\n    fill: 'black',\n    stroke: {\n      width: 1,\n    },\n    fontFamily: 'Arial',\n    fontSize: 12,\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    fontStretch: 'condensed',\n    fontVariantCaps: 'normal',\n    letterSpacing: 0,\n    wordSpacing: 0,\n    textAlign: 'left',\n    filter: 'none',\n    lineHeight: 0,\n    wordWrap: false,\n    wordWrapWidth: 0,\n  }\n\n  _isStroke: boolean\n  constructor(style: Partial<TextStyleOptions> = {}) {\n    super()\n    this._isStroke = !!style.stroke\n    const fullStyle = Object.assign({}, TextStyle.defaultTextStyle, style)\n    for (const key in fullStyle) {\n      const thisKey = key as keyof typeof this\n      const data = fullStyle[key as keyof TextStyleOptions] as any\n      if (key === 'stroke') {\n        this[thisKey] = Object.assign({}, TextStyle.defaultTextStyle[key] as unknown as object, data)\n      }\n      else {\n        this[thisKey] = data\n      }\n    }\n  }\n\n  public reset() {\n    const defaultStyle = TextStyle.defaultTextStyle\n    for (const key in defaultStyle) {\n      this[key as keyof typeof this] = defaultStyle[key as keyof TextStyleOptions] as any\n    }\n    this.updateBounds()\n    this.update()\n  }\n\n  protected readonly textBaseline = 'top'\n\n  private _fontSize: TextStyleOptions['fontSize']\n  set fontSize(value) {\n    this._fontSize = value\n    this.updateBounds()\n    this.update()\n  }\n\n  get fontSize() {\n    return this._fontSize\n  }\n\n  private _fontFamily: TextStyleOptions['fontFamily']\n  set fontFamily(value) {\n    this._fontFamily = value\n    this.updateBounds()\n    this.update()\n  }\n\n  get fontFamily() {\n    return this._fontFamily\n  }\n\n  private _fontStyle: TextStyleOptions['fontStyle']\n\n  set fontStyle(value) {\n    this._fontStyle = value\n    this.updateBounds()\n    this.update()\n  }\n\n  get fontStyle() {\n    return this._fontStyle\n  }\n\n  private _fontWeight: TextStyleOptions['fontWeight']\n\n  set fontWeight(value) {\n    this._fontWeight = value\n    this.updateBounds()\n    this.update()\n  }\n\n  get fontWeight() {\n    return this._fontWeight\n  }\n\n  private _fontStretch: TextStyleOptions['fontStretch'] = TextStyle.defaultTextStyle.fontStretch\n\n  set fontStretch(value) {\n    this._fontStretch = value\n    this.updateBounds()\n    this.update()\n  }\n\n  get fontStretch() {\n    return this._fontStretch\n  }\n\n  private _fontVariantCaps: TextStyleOptions['fontVariantCaps'] = TextStyle.defaultTextStyle.fontVariantCaps\n\n  set fontVariantCaps(value) {\n    this._fontVariantCaps = value\n    this.updateBounds()\n    this.update()\n  }\n\n  get fontVariantCaps() {\n    return this._fontVariantCaps\n  }\n\n  private _letterSpacing: TextStyleOptions['letterSpacing'] = TextStyle.defaultTextStyle.letterSpacing\n\n  set letterSpacing(value) {\n    this._letterSpacing = value\n    this.update()\n    this.updateBounds()\n  }\n\n  get letterSpacing() {\n    return this._letterSpacing\n  }\n\n  private _wordSpacing: TextStyleOptions['wordSpacing'] = TextStyle.defaultTextStyle.wordSpacing\n\n  set wordSpacing(value) {\n    this._wordSpacing = value\n    this.update()\n    this.updateBounds()\n  }\n\n  get wordSpacing() {\n    return this._wordSpacing\n  }\n\n  private _textAlign: TextStyleOptions['textAlign'] = TextStyle.defaultTextStyle.textAlign\n\n  set textAlign(value) {\n    this._textAlign = value\n    this.update()\n  }\n\n  get textAlign() {\n    return this._textAlign\n  }\n\n  private _lineHeight = 0\n\n  set lineHeight(value) {\n    if (this.lineHeight !== value) {\n      this._lineHeight = value\n      this.update()\n      this.updateBounds()\n    }\n  }\n\n  get lineHeight() {\n    if (!this._lineHeight) {\n      this._lineHeight = typeof this.fontSize == 'number' ? this.fontSize : Number.parseInt(`${this.fontSize}`)\n    }\n    return this._lineHeight\n  }\n\n  private _wordWrap = false\n\n  set wordWrap(value) {\n    if (this.wordWrap !== value) {\n      this._wordWrap = value\n      this.update()\n      this.updateBounds()\n    }\n  }\n\n  get wordWrap() {\n    return this._wordWrap\n  }\n\n  private _wordWrapWidth = 0\n\n  set wordWrapWidth(value) {\n    if (this.wordWrapWidth !== value) {\n      this._wordWrapWidth = value\n      this.update()\n      this.updateBounds()\n    }\n  }\n\n  get wordWrapWidth() {\n    return this._wordWrapWidth\n  }\n\n  clone() {\n    return new TextStyle({\n      fill: this.fill,\n      stroke: this.stroke,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontWeight: this.fontWeight,\n      fontStretch: this.fontStretch,\n      fontVariantCaps: this.fontVariantCaps,\n      letterSpacing: this.letterSpacing,\n      wordSpacing: this.wordSpacing,\n      textAlign: this.textAlign,\n      filter: this.filter,\n    })\n  }\n\n  render(ctx: CanvasRenderingContext2D) {\n    super.render(ctx)\n    ctx.textBaseline = 'top'\n    ctx.font = createCanvasFontString(this)\n    ctx.fontStretch = this.fontStretch\n    ctx.fontVariantCaps = this.fontVariantCaps\n    ctx.letterSpacing = formatValue(this.letterSpacing)\n    ctx.wordSpacing = formatValue(this.wordSpacing)\n    ctx.textAlign = this.textAlign\n    return this\n  }\n};\n"],"names":["TextStyle","AbstractStyle","static","fill","stroke","width","fontFamily","fontSize","fontStyle","fontWeight","fontStretch","fontVariantCaps","letterSpacing","wordSpacing","textAlign","filter","lineHeight","wordWrap","wordWrapWidth","_isStroke","constructor","style","super","this","fullStyle","Object","assign","defaultTextStyle","key","thisKey","data","reset","defaultStyle","updateBounds","update","textBaseline","_fontSize","value","_fontFamily","_fontStyle","_fontWeight","_fontStretch","_fontVariantCaps","_letterSpacing","_wordSpacing","_textAlign","_lineHeight","Number","parseInt","_wordWrap","_wordWrapWidth","clone","render","ctx","font","createCanvasFontString","formatValue"],"mappings":"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"}