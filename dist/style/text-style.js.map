{"version":3,"file":"text-style.js","sources":["../../src/style/text-style.ts"],"sourcesContent":["import type { Properties, Property } from 'csstype'\nimport { interceptUpdate2 as interceptUpdate } from '../common/intercept'\nimport { BaseStyle } from './base-style'\n\nexport interface IFont {\n  /**\n   * @description 字体\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family)\n   */\n  fontFamily: Properties['fontFamily']\n  /**\n   * @description 字体大小 当值为 number 时单位为px\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size)\n   */\n  fontSize: Properties['fontSize'] | (number & {})\n  /**\n   * @description 字体样式\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-style)\n   */\n  fontStyle: Properties['fontStyle']\n  /**\n   * @description 字体的粗细程度\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight)\n   */\n  fontWeight: Properties['fontWeight']\n\n  /**\n   * 指定绘制文本时字体如何被扩展或压缩\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/fontStretch)\n   */\n  fontStretch: CanvasFontStretch\n  /**\n   * 用于指定渲染文本的替代大写形式\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps)\n   */\n  fontVariantCaps: CanvasFontVariantCaps\n  /**\n   * 用于指定绘制文本时字母之间的间距\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/letterSpacing)\n   */\n  letterSpacing: string | number\n  /**\n   * 指定绘制文本时单词之间的间距\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/wordSpacing)\n   */\n  wordSpacing: string | number\n  /**\n   * 文本时文本的对齐方式\n   * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/textAlign)\n   */\n  textAlign: CanvasTextAlign\n  // /**\n  //  * 绘制文本时使用的文本基线 建议使用top 即文本坐标为右上角(由于设备差异或者字体差异导致这个坐标是预估的, 尤其是y坐标, 不适合精细的绘制)\n  //  * [MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/textBaseline)\n  //  */\n  // textBaseline?: CanvasTextBaseline\n}\nexport class TextStyle extends BaseStyle implements Required<IFont> {\n  readonly textBaseline = 'top'\n\n  private _fontSize: IFont['fontSize'] = 12\n\n  @interceptUpdate()\n  set fontSize(value) {\n    this._fontSize = value\n  }\n\n  get fontSize() {\n    return this._fontSize\n  }\n\n  private _fontFamily = 'serif'\n\n  @interceptUpdate()\n  set fontFamily(value) {\n    this._fontFamily = value\n  }\n\n  get fontFamily() {\n    return this._fontFamily\n  }\n\n  private _fontStyle = 'normal'\n\n  @interceptUpdate()\n  set fontStyle(value) {\n    this._fontStyle = value\n  }\n\n  get fontStyle() {\n    return this._fontStyle\n  }\n\n  private _fontWeight = 'normal'\n  @interceptUpdate()\n  set fontWeight(value) {\n    this._fontWeight = value\n  }\n\n  get fontWeight() {\n    return this._fontWeight\n  }\n\n  private _fontStretch: IFont['fontStretch'] = 'normal'\n  @interceptUpdate()\n  set fontStretch(value) {\n    this._fontStretch = value\n  }\n\n  get fontStretch() {\n    return this._fontStretch\n  }\n\n  private _fontVariantCaps: IFont['fontVariantCaps'] = 'normal'\n  @interceptUpdate()\n  set fontVariantCaps(value) {\n    this._fontVariantCaps = value\n  }\n\n  get fontVariantCaps() {\n    return this._fontVariantCaps\n  }\n\n  private _letterSpacing: IFont['letterSpacing'] = 0\n  set letterSpacing(value) {\n    this._letterSpacing = value\n  }\n\n  get letterSpacing() {\n    return this._letterSpacing\n  }\n\n  private _wordSpacing: IFont['wordSpacing'] = 'normal'\n  @interceptUpdate()\n  set wordSpacing(value) {\n    this._wordSpacing = value\n  }\n\n  get wordSpacing() {\n    return this._wordSpacing\n  }\n\n  private _textAlign: IFont['textAlign'] = 'left'\n  @interceptUpdate()\n  set textAlign(value) {\n    this._textAlign = value\n  }\n\n  get textAlign() {\n    return this._textAlign\n  }\n};\n"],"names":["TextStyle","BaseStyle","textBaseline","_fontSize","fontSize","value","this","_fontFamily","fontFamily","_fontStyle","fontStyle","_fontWeight","fontWeight","_fontStretch","fontStretch","_fontVariantCaps","fontVariantCaps","_letterSpacing","letterSpacing","_wordSpacing","wordSpacing","_textAlign","textAlign","__decorate","interceptUpdate","prototype"],"mappings":"wHAyDM,MAAOA,UAAkBC,EAAAA,UACpBC,aAAe,MAEhBC,UAA+B,GAGvC,YAAIC,CAASC,GACXC,KAAKH,UAAYE,CAClB,CAED,YAAID,GACF,OAAOE,KAAKH,SACb,CAEOI,YAAc,QAGtB,cAAIC,CAAWH,GACbC,KAAKC,YAAcF,CACpB,CAED,cAAIG,GACF,OAAOF,KAAKC,WACb,CAEOE,WAAa,SAGrB,aAAIC,CAAUL,GACZC,KAAKG,WAAaJ,CACnB,CAED,aAAIK,GACF,OAAOJ,KAAKG,UACb,CAEOE,YAAc,SAEtB,cAAIC,CAAWP,GACbC,KAAKK,YAAcN,CACpB,CAED,cAAIO,GACF,OAAON,KAAKK,WACb,CAEOE,aAAqC,SAE7C,eAAIC,CAAYT,GACdC,KAAKO,aAAeR,CACrB,CAED,eAAIS,GACF,OAAOR,KAAKO,YACb,CAEOE,iBAA6C,SAErD,mBAAIC,CAAgBX,GAClBC,KAAKS,iBAAmBV,CACzB,CAED,mBAAIW,GACF,OAAOV,KAAKS,gBACb,CAEOE,eAAyC,EACjD,iBAAIC,CAAcb,GAChBC,KAAKW,eAAiBZ,CACvB,CAED,iBAAIa,GACF,OAAOZ,KAAKW,cACb,CAEOE,aAAqC,SAE7C,eAAIC,CAAYf,GACdC,KAAKa,aAAed,CACrB,CAED,eAAIe,GACF,OAAOd,KAAKa,YACb,CAEOE,WAAiC,OAEzC,aAAIC,CAAUjB,GACZC,KAAKe,WAAahB,CACnB,CAED,aAAIiB,GACF,OAAOhB,KAAKe,UACb,EAvFDE,EAAAA,WAAA,CADCC,sBAGAxB,EAAAyB,UAAA,WAAA,MASDF,EAAAA,WAAA,CADCC,sBAGAxB,EAAAyB,UAAA,aAAA,MASDF,EAAAA,WAAA,CADCC,sBAGAxB,EAAAyB,UAAA,YAAA,MAQDF,EAAAA,WAAA,CADCC,sBAGAxB,EAAAyB,UAAA,aAAA,MAQDF,EAAAA,WAAA,CADCC,sBAGAxB,EAAAyB,UAAA,cAAA,MAQDF,EAAAA,WAAA,CADCC,sBAGAxB,EAAAyB,UAAA,kBAAA,MAiBDF,EAAAA,WAAA,CADCC,sBAGAxB,EAAAyB,UAAA,cAAA,MAQDF,EAAAA,WAAA,CADCC,sBAGAxB,EAAAyB,UAAA,YAAA"}