import{TextStyle as t}from"../style/text-style.mjs";import{Display as s}from"./display.mjs";import"../utils.mjs";import"../style/base-style.mjs";import"../coordinate/ObservablePoint.mjs";class e extends s{constructor(t){super(t),t.style&&(this.style=t.style),this.text=t.text??""}_style=new t;set style(s){s=s||{},this._style?.off("update",this._onUpdate,this),this._style?.off("updateBounds",this._updateBounds,this),this._style=s instanceof t?s:new t(s),this._style.on("update",this._onUpdate,this),this._style?.on("updateBounds",this._updateBounds,this),this._onUpdate()}get style(){return this._style}_text="";set text(t){this._text!==t&&(this._text=t,this._onUpdate())}get text(){return this._text}get _shouldUpdate(){return!!this.style.fill||!(!this.style.stroke||!this.style.strokeWeight)}getSplitText(t){const s=this.text.split(""),e=[];let i=[];for(let h=0;h<s.length;h++){const o=s[h];i.push(o);const l=i.join("");t.measureText(l).width>this.style.wordWrapWidth?(i.pop(),e.push(i.join("")),i=[o]):h===s.length-1&&e.push(l)}return e}_render(t){if(this.style.fill||this.style.stroke&&this.style.strokeWeight)if(this.style.render(t),this.style.wordWrap&&this.style.wordWrapWidth){const s=this.getSplitText(t);for(let e=0;e<s.length;e++){const i=s[e];this.style.fill&&t.strokeText(i,this.position.x,this.position.y+e*this.style.lineHeight),this.style.stroke&&this.style.strokeWeight&&t.strokeText(i,this.position.x,this.position.y+e*this.style.lineHeight)}}else this.style.fill&&t.fillText(this.text,this.position.x,this.position.y),this.style.stroke&&this.style.strokeWeight&&t.strokeText(this.text,this.position.x,this.position.y)}_updateBounds(){this._app&&this._app.onContext((t=>{if(this.style.render(t),this.style.wordWrap&&this.style.wordWrapWidth){const s=this.getSplitText(t);if(this.width=this.style.wordWrapWidth,!s.length)return void(this.height=0);const e=t.measureText(this.getSplitText(t)[0]),i=this.style.lineHeight;let h=Math.max(e.actualBoundingBoxDescent-e.actualBoundingBoxAscent,i);this.style.stroke&&this.style.strokeWeight&&(h+=this.style.strokeWeight),s.length>1&&(this.height=(s.length-1)*i+h)}else{const s=t.measureText(this.text);let e=Math.max(s.actualBoundingBoxDescent-s.actualBoundingBoxAscent,"number"==typeof this.style.fontSize?this.style.fontSize:Number.parseInt(`${this.style.fontSize}`));this.style.stroke&&this.style.strokeWeight&&(e+=this.style.strokeWeight),this.height=e}}))}width=0;height=0}export{e as Text};
//# sourceMappingURL=text.mjs.map
