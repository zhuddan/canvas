{"version":3,"file":"text.mjs","sources":["../../src/object/text.ts"],"sourcesContent":["// import { interceptDirty } from '../common/intercept'\nimport type { TextStyleOptions } from '../style/text-style'\nimport { TextStyle } from '../style/text-style'\nimport { createCanvasFontString, formatValue } from '../utils'\nimport type { DisplayOptions } from './display'\nimport { Display } from './display'\n\nexport interface TextOptions extends DisplayOptions {\n  text: string\n  style?: Partial<TextStyleOptions> | TextStyle\n}\nexport class Text extends Display {\n  constructor(options: TextOptions) {\n    super(options)\n    if (options.style)\n      this.style = options.style\n    this.text = options.text ?? ''\n  }\n\n  private _style = new TextStyle()\n\n  set style(style: Partial<TextStyleOptions> | TextStyle) {\n    style = style || {}\n    this._style?.off('update', this._onUpdate, this)\n    this._style?.off('updateBounds', this._updateBounds, this)\n    if (style instanceof TextStyle) {\n      this._style = style\n    }\n    else {\n      this._style = new TextStyle(style)\n    }\n    this._style.on('update', this._onUpdate, this)\n    this._style?.on('updateBounds', this._updateBounds, this)\n    this._onUpdate()\n  }\n\n  get style(): TextStyle {\n    return this._style\n  }\n\n  private _text = ''\n\n  set text(text) {\n    if (this._text === text)\n      return\n    this._text = text\n    this._onUpdate()\n  }\n\n  get text() {\n    return this._text\n  }\n\n  get _shouldUpdate(): boolean {\n    return !!(this.style.fill) || !!(this.style.stroke && this.style.strokeWeight)\n  }\n\n  getSplitText(ctx: CanvasRenderingContext2D) {\n    const texts = this.text.split('')\n    const splitText = []\n    let multilineText: string[] = []\n    for (let i = 0; i < texts.length; i++) {\n      const currentStr = texts[i]\n      multilineText.push(currentStr)\n      const rowStr = multilineText.join('')\n      if (ctx.measureText(rowStr).width > this.style.wordWrapWidth) {\n        multilineText.pop()\n        splitText.push(multilineText.join(''))\n        multilineText = [currentStr]\n        continue\n      }\n      if (i === texts.length - 1) {\n        splitText.push(rowStr)\n      }\n    }\n    return splitText\n  }\n\n  _render(ctx: CanvasRenderingContext2D) {\n    if (this.style.fill || (this.style.stroke && this.style.strokeWeight)) {\n      this.style.render(ctx)\n      // 绘制单行文本\n      if (!this.style.wordWrap || !this.style.wordWrapWidth) {\n        if (this.style.fill) {\n          ctx.fillText(this.text, this.position.x, this.position.y)\n        }\n        if (this.style.stroke && this.style.strokeWeight) {\n          ctx.strokeText(this.text, this.position.x, this.position.y)\n        }\n      }\n      else {\n        const splitText = this.getSplitText(ctx)\n        for (let i = 0; i < splitText.length; i++) {\n          const text = splitText[i]\n          if (this.style.fill) {\n            ctx.strokeText(text, this.position.x, this.position.y + i * this.style.lineHeight)\n          }\n          if (this.style.stroke && this.style.strokeWeight) {\n            ctx.strokeText(text, this.position.x, this.position.y + i * this.style.lineHeight)\n          }\n        }\n      }\n    }\n  }\n\n  _updateBounds() {\n    if (!this._app)\n      return\n    this._app.onContext((ctx) => {\n      this.style.render(ctx)\n      if (!this.style.wordWrap || !this.style.wordWrapWidth) {\n        const measure = ctx.measureText(this.text)\n        let height = Math.max(...[\n          measure.actualBoundingBoxDescent - measure.actualBoundingBoxAscent,\n          typeof this.style.fontSize == 'number' ? this.style.fontSize : Number.parseInt(`${this.style.fontSize}`),\n        ])\n        if (this.style.stroke && this.style.strokeWeight) {\n          height += this.style.strokeWeight\n        }\n        this.height = height\n      }\n      else {\n        const splitText = this.getSplitText(ctx)\n        this.width = this.style.wordWrapWidth\n        if (!splitText.length) {\n          this.height = 0\n          return\n        }\n        const measure = ctx.measureText(this.getSplitText(ctx)[0])\n        const lineHeight = this.style.lineHeight\n        let height = Math.max(...[\n          measure.actualBoundingBoxDescent - measure.actualBoundingBoxAscent,\n          lineHeight,\n        ])\n        if (this.style.stroke && this.style.strokeWeight) {\n          height += this.style.strokeWeight\n        }\n        if (splitText.length > 1) {\n          this.height = (splitText.length - 1) * lineHeight + height\n        }\n      }\n    })\n  }\n\n  width = 0\n\n  height = 0\n};\n"],"names":["Text","Display","constructor","options","super","style","this","text","_style","TextStyle","off","_onUpdate","_updateBounds","on","_text","_shouldUpdate","stroke","strokeWeight","getSplitText","ctx","texts","split","splitText","multilineText","i","length","currentStr","push","rowStr","join","measureText","width","wordWrapWidth","pop","_render","fill","render","wordWrap","strokeText","position","x","y","lineHeight","fillText","_app","onContext","height","measure","Math","max","actualBoundingBoxDescent","actualBoundingBoxAscent","fontSize","Number","parseInt"],"mappings":"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"}