{"version":3,"file":"picture.js","sources":["../../src/object/picture.ts"],"sourcesContent":["import type { Properties } from 'csstype'\nimport type { PointData } from '../coordinate/PointData'\nimport { ObservablePoint } from '../coordinate/ObservablePoint'\nimport { calcDiff } from '../utils'\nimport { App } from '../app'\nimport type { DisplayOptions } from './display'\nimport { Display } from './display'\n\ninterface PictureOptions extends DisplayOptions {\n  size?: PointData\n  slice?: PointData\n  sliceSize?: PointData\n  objectFit?: Properties['objectFit']\n  rounded?: number\n}\n\nexport class Picture extends Display {\n  constructor(maybeImage: HTMLImageElement | string, private options?: PictureOptions) {\n    super(options)\n    if (typeof maybeImage == 'string') {\n      this.image = App.createImage()\n      this.image.src = maybeImage\n    }\n    else {\n      this.image = maybeImage\n    }\n\n    if (this.image.complete) {\n      this._onImageComplete()\n    }\n    else {\n      this.image.addEventListener('load', () => {\n        this._onImageComplete()\n      })\n    }\n  }\n\n  private image: HTMLImageElement\n\n  // set image(value) {\n  //   if (this.image !== value) {\n  //     this._image = value\n  //   }\n  // }\n\n  // get image() {\n  //   return this._image\n  // }\n\n  private _size = new ObservablePoint(this, 0, 0)\n\n  private _imageSize = new ObservablePoint(this, 0, 0)\n\n  set size(value: PointData) {\n    if (this.size !== value) {\n      this._size.copyFrom(value)\n      this.shouldUpdateBounds()\n    }\n  }\n\n  get size(): ObservablePoint {\n    return this._size\n  }\n\n  private _slice = new ObservablePoint(this)\n\n  set slice(value: PointData) {\n    if (this.slice !== value) {\n      this._slice.copyFrom(value)\n      this.shouldUpdateBounds()\n    }\n  }\n\n  get slice(): ObservablePoint {\n    return this._slice\n  }\n\n  private _sliceSize = new ObservablePoint(this)\n\n  set sliceSize(value: PointData) {\n    if (this.sliceSize !== value) {\n      this._sliceSize.copyFrom(value)\n      this._onUpdate()\n      this.shouldUpdateBounds()\n    }\n  }\n\n  get sliceSize(): ObservablePoint {\n    return this._sliceSize\n  }\n\n  private _objectFit: Properties['objectFit'] = 'none'\n\n  set objectFit(value) {\n    if (this.objectFit !== value) {\n      this._objectFit = value\n      this.shouldUpdateBounds()\n      this._onUpdate()\n    }\n  }\n\n  get objectFit() {\n    return this._objectFit\n  }\n\n  private _rounded = 0\n\n  set rounded(value) {\n    value = value <= 0 ? 0 : value\n    if (this.rounded !== value) {\n      this._rounded = value\n      this._onUpdate()\n    }\n  }\n\n  _onUpdate(_point?: ObservablePoint | undefined) {\n    if (this._ready)\n      super._onUpdate(_point)\n  }\n\n  get rounded() {\n    return this._rounded\n  }\n\n  private _ready = false\n\n  private _onImageComplete() {\n    this._imageSize = new ObservablePoint(this, this.image.width, this.image.height)\n\n    this.size = this.options?.size ?? {\n      x: this.image.width,\n      y: this.image.height,\n    }\n\n    this.slice = this.options?.slice ?? this.slice\n\n    this.sliceSize = this.options?.sliceSize ?? {\n      x: this.image.width,\n      y: this.image.height,\n    }\n\n    this.objectFit = this.options?.objectFit ?? this.objectFit\n\n    this.rounded = this.options?.rounded ?? this.rounded\n    this.emit('ready')\n    this._ready = true\n    this._onUpdate()\n    this.shouldUpdateBounds()\n  }\n\n  get _shouldUpdate(): boolean {\n    return true\n  }\n\n  private get _isSlice() {\n    return (!!this.slice.x || !!this.slice.y) || !this.sliceSize.equals(this.size)\n  }\n\n  protected _render(ctx: CanvasRenderingContext2D): void {\n    if (!this._isSlice) {\n      const _size = this.size.clone()\n      const _position = this.position.clone()\n      const scaleDiff = _size.x / this._imageSize.x\n      const diffSize = calcDiff([this._imageSize.x, this._imageSize.y])\n      const diff = diffSize * scaleDiff\n      const slim = this._imageSize.x < this._imageSize.y\n      const fat = this._imageSize.x > this._imageSize.y\n      if ((slim || fat)) {\n        switch (this.objectFit) {\n          case 'contain':\n            if (slim) {\n              this.position.set(this.position.x - diff / 2, this.position.y)\n              this.size.set(this.size.x - diff, this.size.y)\n            }\n            else {\n              this.position.set(this.position.x, this.position.y + diff / 2)\n              this.size.set(this.size.x, this.size.y - diff)\n            }\n            ctx.beginPath()\n            if (this.rounded) {\n              ctx.roundRect(this.x, this.y, this.size.x, this.size.y, this.rounded)\n            }\n            else {\n              ctx.rect(this.x, this.y, this.size.x, this.size.y)\n            }\n            ctx.clip()\n            break\n          case 'cover':\n            if (slim) {\n              this.position.set(this.position.x + diff / 2, this.position.y)\n              this.size.set(this.size.x + diff, this.size.y)\n            }\n            else {\n              this.position.set(this.position.x - diff / 2, this.position.y)\n              this.size.set(this.size.x + diff, this.size.y)\n            }\n\n            ctx.beginPath()\n            if (this.rounded) {\n              ctx.roundRect(_position.x, _position.y, _size.x, _size.y, this.rounded)\n            }\n            else {\n              ctx.rect(_position.x, _position.y, _size.x, _size.y)\n            }\n            ctx.clip()\n            break\n          default:\n        }\n      }\n      ctx.drawImage(\n        this.image,\n        this.position.x,\n        this.position.y,\n        this.size.x,\n        this.size.y,\n      )\n\n      this.position = _position\n      this.size = _size\n    }\n    else {\n      const args = [\n        this.image,\n        this.slice.x,\n        this.slice.y,\n        this.sliceSize.x,\n        this.sliceSize.y,\n        this.x,\n        this.y,\n        this.size.x,\n        this.size.y,\n      ] as const\n\n      ctx.beginPath()\n      if (this.rounded) {\n        ctx.roundRect(this.x, this.y, this.size.x, this.size.y, this.rounded)\n      }\n      else {\n        ctx.rect(this.x, this.y, this.size.x, this.size.y)\n      }\n      ctx.clip()\n      ctx.drawImage(...args)\n    }\n  }\n\n  transformWidth: number = 0\n  transformHeight: number = 0\n  updateTransformBounds(): void {\n    this.transformHeight = this.size.x\n    this.transformWidth = this.size.y\n  }\n}\n"],"names":["Picture","Display","options","constructor","maybeImage","super","this","image","App","createImage","src","complete","_onImageComplete","addEventListener","_size","ObservablePoint","_imageSize","size","value","copyFrom","shouldUpdateBounds","_slice","slice","_sliceSize","sliceSize","_onUpdate","_objectFit","objectFit","_rounded","rounded","_point","_ready","width","height","x","y","emit","_shouldUpdate","_isSlice","equals","_render","ctx","args","beginPath","roundRect","rect","clip","drawImage","clone","_position","position","scaleDiff","diff","calcDiff","slim","fat","set","transformWidth","transformHeight","updateTransformBounds"],"mappings":"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"}