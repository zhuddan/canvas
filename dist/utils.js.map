{"version":3,"file":"utils.js","sources":["../src/utils.ts"],"sourcesContent":["import type { TextStyle } from './style/text-style'\nimport type { IFont } from './types'\n\nexport function formatValue(val: string | number) {\n  return typeof val === 'string' ? val : `${val}px`\n}\n\n/**\n * 创造 [CSS-font](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font) 字符串\n * 由于 canvas 绘制的差异性部分属性不生效故舍弃\n */\nexport function createCanvasFontString({\n  fontFamily,\n  fontSize,\n  fontStyle = 'normal',\n  fontWeight = 'normal',\n}: TextStyle): string {\n  const _fontSize = typeof fontSize === 'string' ? fontSize : `${fontSize}px`\n  return `${fontStyle} ${fontWeight} ${_fontSize} ${fontFamily}`\n}\n\nexport function calcMin(numbers: number[]) {\n  return numbers.reduce((a, b) => {\n    return a < b ? a : b\n  })\n}\n\nexport function calcMax(numbers: number[]) {\n  return numbers.reduce((a, b) => {\n    return a > b ? a : b\n  })\n}\n\n/**\n * 计算差异\n * @param numbers\n */\nexport function calcDiff(numbers: number[]) {\n  return calcMax(numbers) - calcMin(numbers)\n}\n\n/**\n * 确保输入值在 min 和 max 之间，若超出边界则返回边界\n * @param input\n * @param min\n * @param max\n */\nexport function ensureBetween(input: number, min: number = 0, max: number = 1) {\n  return input <= min ? min : input >= max ? max : input\n}\n\nexport function calcCenter(num1: number, num2: number) {\n  return (num1 + num2) / 2\n}\n\n// export function toPoint(point: PointObject | number): PointObject {\n//   let x = 0\n//   let y = 0\n//   if (typeof point !== 'undefined') {\n//     if (typeof point === 'object') {\n//       x = point.x\n//       y = point.y\n//     }\n//     else {\n//       x = y = point\n//     }\n//   }\n//   return { x, y }\n// }\n\n// // 计算变换后的矩形实际大小\n// export function getTransformedRectSize(\n//   transform: [number, number, number, number, number, number],\n//   bounds: Bounds,\n// ) {\n//   const [scaleX, skewX, skewY, scaleY, translateX, translateY] = transform\n//   // const [1, 0.5, 0.5, 1, 0, 0] = transform\n//   const x = bounds.start.x\n//   const y = bounds.start.y\n//   const width = bounds.width\n//   const height = bounds.height\n//   // 矩形四个角的坐标\n//   const corners: IPoint[] = [\n//     { x, y },\n//     { x: x + width, y },\n//     { x: x + width, y: y + height },\n//     { x, y: y + height },\n//   ]\n\n//   // 变换后的角点坐标\n//   const transformedCorners = corners.map(({ x: cx, y: cy }) => {\n//     return {\n//       x: scaleX * cx + skewY * cy + translateX,\n//       y: skewX * cx + scaleY * cy + translateY,\n//     }\n//   })\n\n//   // 计算变换后的矩形宽度和高度\n//   const xValues = transformedCorners.map(corner => corner.x)\n//   const yValues = transformedCorners.map(corner => corner.y)\n//   const minX = Math.min(...xValues)\n//   const maxX = Math.max(...xValues)\n//   const minY = Math.min(...yValues)\n//   const maxY = Math.max(...yValues)\n\n//   return {\n//     width: maxX - minX,\n//     height: maxY - minY,\n//   }\n// }\n\n// export function calculateEllipseRadii(rx: number, ry: number, a: number, b: number, c: number, d: number): { newRx: number, newRy: number } {\n//   const newRx = Math.sqrt((a * rx) ** 2 + (b * ry) ** 2)\n//   const newRy = Math.sqrt((c * rx) ** 2 + (d * ry) ** 2)\n//   return { newRx, newRy }\n// }\n\n// const originalRadius = 50\n// const transformMatrix = [1, 0.8, 0.2, 1] as const\n// const { newRx, newRy } = calculateEllipseRadii(originalRadius, originalRadius, ...transformMatrix)\n\n// console.log(`Transformed ellipse radii: Rx = ${newRx}, Ry = ${newRy}`)\n"],"names":[],"mappings":";;;;AAGM,SAAU,WAAW,CAAC,GAAoB,EAAA;AAC9C,IAAA,OAAO,OAAO,GAAG,KAAK,QAAQ,GAAG,GAAG,GAAG,CAAG,EAAA,GAAG,IAAI,CAAA;AACnD,CAAC;AAED;;;AAGG;AACa,SAAA,sBAAsB,CAAC,EACrC,UAAU,EACV,QAAQ,EACR,SAAS,GAAG,QAAQ,EACpB,UAAU,GAAG,QAAQ,GACX,EAAA;AACV,IAAA,MAAM,SAAS,GAAG,OAAO,QAAQ,KAAK,QAAQ,GAAG,QAAQ,GAAG,CAAG,EAAA,QAAQ,IAAI,CAAA;IAC3E,OAAO,CAAA,EAAG,SAAS,CAAI,CAAA,EAAA,UAAU,IAAI,SAAS,CAAA,CAAA,EAAI,UAAU,CAAA,CAAE,CAAA;AAChE,CAAC;AAEK,SAAU,OAAO,CAAC,OAAiB,EAAA;IACvC,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;QAC7B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;AACtB,KAAC,CAAC,CAAA;AACJ,CAAC;AAEK,SAAU,OAAO,CAAC,OAAiB,EAAA;IACvC,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;QAC7B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;AACtB,KAAC,CAAC,CAAA;AACJ,CAAC;AAED;;;AAGG;AACG,SAAU,QAAQ,CAAC,OAAiB,EAAA;IACxC,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;AAC5C,CAAC;AAED;;;;;AAKG;AACG,SAAU,aAAa,CAAC,KAAa,EAAE,GAAc,GAAA,CAAC,EAAE,GAAA,GAAc,CAAC,EAAA;IAC3E,OAAO,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,KAAK,CAAA;AACxD,CAAC;AAEe,SAAA,UAAU,CAAC,IAAY,EAAE,IAAY,EAAA;AACnD,IAAA,OAAO,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAA;AAC1B,CAAC;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;"}